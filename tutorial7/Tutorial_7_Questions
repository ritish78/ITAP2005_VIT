3.	Design a class named Triangle that extends GeometricObject. The class contains:
•	Three double data fields named side1, side2, and side3 with default values 1.0 to denote three sides of the triangle.
•	A no-arg constructor that creates a default triangle.
•	A constructor that creates a triangle with the specified side1, side2, and side3.
•	The accessor methods for all three data fields.
•	A method named getArea() that returns the area of this triangle.
•	A method named getPerimeter() that returns the perimeter of this triangle.
•	A method named toString() that returns a string description for the triangle.
•	For the formula to compute the area of a triangle
•	The toString() method is implemented as follows:

return "Triangle: side1 = " + side1 + " side2 = " + side2 + " side3 = " + side3;

Implement classes Triangle and GeometricObject. Write a test program that prompts the user to enter three sides of the triangle, a color, and a Boolean value to indicate whether the triangle is filled. The program should create a Triangle object with these sides and set the color and filled properties using the input. The program should display the area, perimeter, color, and true or false to indicate whether it is filled or not.


4.	Design a class named Account that contains:
•	A private int data field named id for the account (default 0).
•	A private double data field named balance for the account (default 0).
•		A private double data field named annualInterestRate that stores the current interest rate (default 0). Assume all accounts have the same interest rate.
•		A private Date data field named dateCreated that stores the date when the account was created.
•	A no-arg constructor that creates a default account.
•	A constructor that creates an account with the specified id and initial balance.
•	The accessor and mutator methods for id,balance, and annualInterestRate.
•	The accessor method for dateCreated.
•	A method named getMonthlyInterestRate() that returns the monthly interest rate.
•	A method named getMonthlyInterest() that returns the monthly interest.
•	A method named withdraw that withdraws a specified amount from the account.
•	A method named deposit that deposits a specified amount to the account.

Implement the class. (Hint: The method getMonthlyInterest() is to return monthly interest, not the interest rate. Monthly interest is balance*monthlyInterestRate.monthlyInterestRate is annualInterestRate / 12. Note that annualInterestRate is a percentage, e.g., like 4.5%. You need to divide it by 100.) Write a test program that creates an Account object with an account ID of 1122, a balance of $20,000, and an annual interest rate of 4.5%. Use the withdraw method to withdraw $2,500, use the deposit method to deposit $3,000, and print the balance, the monthly interest, and the date when this account was created.

the Account class was defined to model a bank account. An account has the properties id (account number), balance, annual interest rate, and date created, and methods to deposit and withdraw funds. Create two subclasses for checking and saving accounts. A checking account has an overdraft limit, but a savings account cannot be overdrawn. Write above classes and write a test program that creates objects of Account,
SavingsAccount, and CheckingAccount and invokes their toString() methods
